// Code generated by goctl. DO NOT EDIT!
// Source: blog.proto

package blogclient

import (
	"context"

	"qianxi-blog/service/blog/rpc/blog"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	CommentPageReply      = blog.CommentPageReply
	CountReply            = blog.CountReply
	UpdateReq             = blog.UpdateReq
	PostReq               = blog.PostReq
	DeleteReq             = blog.DeleteReq
	WeekCountReply        = blog.WeekCountReply
	Comment               = blog.Comment
	CommentDeleteReq      = blog.CommentDeleteReq
	SystemInfoReply       = blog.SystemInfoReply
	SystemInfoAllReply    = blog.SystemInfoAllReply
	UpdateSystemInfoReply = blog.UpdateSystemInfoReply
	PageReply             = blog.PageReply
	InsertReq             = blog.InsertReq
	SystemInfoReq         = blog.SystemInfoReq
	SystemInfoAllReq      = blog.SystemInfoAllReq
	UpdateSystemInfoReq   = blog.UpdateSystemInfoReq
	PageReq               = blog.PageReq
	Post                  = blog.Post
	CountReq              = blog.CountReq
	UpdateReply           = blog.UpdateReply
	PostReply             = blog.PostReply
	DeleteReply           = blog.DeleteReply
	InsertReply           = blog.InsertReply
	CommentDeleteReply    = blog.CommentDeleteReply

	Blog interface {
		Posts(ctx context.Context, in *PageReq) (*PageReply, error)
		PostCount(ctx context.Context, in *CountReq) (*CountReply, error)
		CommentCount(ctx context.Context, in *CountReq) (*CountReply, error)
		Update(ctx context.Context, in *UpdateReq) (*UpdateReply, error)
		Post(ctx context.Context, in *PostReq) (*PostReply, error)
		Delete(ctx context.Context, in *DeleteReq) (*DeleteReply, error)
		UpdateWithContent(ctx context.Context, in *UpdateReq) (*UpdateReply, error)
		Insert(ctx context.Context, in *InsertReq) (*InsertReply, error)
		Comments(ctx context.Context, in *PageReq) (*CommentPageReply, error)
		DeleteComment(ctx context.Context, in *CommentDeleteReq) (*CommentDeleteReply, error)
		SystemInfo(ctx context.Context, in *SystemInfoReq) (*SystemInfoReply, error)
		SystemInfoAll(ctx context.Context, in *SystemInfoAllReq) (*SystemInfoAllReply, error)
		UpdateSystemInfo(ctx context.Context, in *UpdateSystemInfoReq) (*UpdateSystemInfoReply, error)
		VisitedCount(ctx context.Context, in *CountReq) (*CountReply, error)
		PeopleCount(ctx context.Context, in *CountReq) (*CountReply, error)
		WeekCount(ctx context.Context, in *CountReq) (*WeekCountReply, error)
	}

	defaultBlog struct {
		cli zrpc.Client
	}
)

func NewBlog(cli zrpc.Client) Blog {
	return &defaultBlog{
		cli: cli,
	}
}

func (m *defaultBlog) Posts(ctx context.Context, in *PageReq) (*PageReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.Posts(ctx, in)
}

func (m *defaultBlog) PostCount(ctx context.Context, in *CountReq) (*CountReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.PostCount(ctx, in)
}

func (m *defaultBlog) CommentCount(ctx context.Context, in *CountReq) (*CountReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.CommentCount(ctx, in)
}

func (m *defaultBlog) Update(ctx context.Context, in *UpdateReq) (*UpdateReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.Update(ctx, in)
}

func (m *defaultBlog) Post(ctx context.Context, in *PostReq) (*PostReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.Post(ctx, in)
}

func (m *defaultBlog) Delete(ctx context.Context, in *DeleteReq) (*DeleteReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.Delete(ctx, in)
}

func (m *defaultBlog) UpdateWithContent(ctx context.Context, in *UpdateReq) (*UpdateReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.UpdateWithContent(ctx, in)
}

func (m *defaultBlog) Insert(ctx context.Context, in *InsertReq) (*InsertReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.Insert(ctx, in)
}

func (m *defaultBlog) Comments(ctx context.Context, in *PageReq) (*CommentPageReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.Comments(ctx, in)
}

func (m *defaultBlog) DeleteComment(ctx context.Context, in *CommentDeleteReq) (*CommentDeleteReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.DeleteComment(ctx, in)
}

func (m *defaultBlog) SystemInfo(ctx context.Context, in *SystemInfoReq) (*SystemInfoReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.SystemInfo(ctx, in)
}

func (m *defaultBlog) SystemInfoAll(ctx context.Context, in *SystemInfoAllReq) (*SystemInfoAllReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.SystemInfoAll(ctx, in)
}

func (m *defaultBlog) UpdateSystemInfo(ctx context.Context, in *UpdateSystemInfoReq) (*UpdateSystemInfoReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.UpdateSystemInfo(ctx, in)
}

func (m *defaultBlog) VisitedCount(ctx context.Context, in *CountReq) (*CountReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.VisitedCount(ctx, in)
}

func (m *defaultBlog) PeopleCount(ctx context.Context, in *CountReq) (*CountReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.PeopleCount(ctx, in)
}

func (m *defaultBlog) WeekCount(ctx context.Context, in *CountReq) (*WeekCountReply, error) {
	client := blog.NewBlogClient(m.cli.Conn())
	return client.WeekCount(ctx, in)
}
